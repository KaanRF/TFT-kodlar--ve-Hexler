#include "stm32f4xx.h"
#include "system_stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "stm32f4_discovery_lis302dl.h"
#include "stm32f4xx_tim.h"
#include "delay.h"
#include "tft_lcd.h"
#include "touch.h"
#include "math.h"
#include "stdio.h"
#include <stdlib.h>
#include "trigotable.h"

#define DOUBLECLICK_Z                    ((uint8_t)0x60)
#define SINGLECLICK_Z                    ((uint8_t)0x50)
#define TIM_ARR                          ((uint16_t)1900)
#define TIM_CCR                          ((uint16_t)1000)
#define ABS(x)                           (x < 0) ? (-x) : x
#define MAX(a,b)                         (a < b) ? (b) : a


//Fonksiyonlarim

//TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

void tft_yaz(void);
static void TIM4_Config(void);

//resim , touch panel tanimlamalari
extern unsigned int xxx,yyy;
extern unsigned char flag;

extern u8 gImage_RES[];
extern u8 gImage_logo[];
extern u8 gImage_NKU[];
extern u8 gImage_gs[];
extern u8 gImage_r3[];
extern u8 gImage_sil[];

//integer char float tanimlamalar
float j,k;
char deger1[50];
uint16_t xx,yy,zz;


/**************************/
#define I8    signed char
#define U8  unsigned char     /* unsigned 8  bits. */
#define I16   signed short    /*   signed 16 bits. */
#define U16 unsigned short    /* unsigned 16 bits. */
#define I32   signed long   /*   signed 32 bits. */
#define U32 unsigned long   /* unsigned 32 bits. */
#define I16P I16              /*   signed 16 bits OR MORE ! */
#define U16P U16              /* unsigned 16 bits OR MORE ! */

/*********************************/
// Küp yüzleri olusturan Global degisken noktalari
const signed int px[8]={-10,10,10,-10,-10,10,10,-10};   // Küp X noktalari
const signed int py[8]={-10,-10,10,10,-10,-10,10,10};   // Küp Y noktalari
const signed int pz[8]={-10,-10,-10,-10,10,10,10,10};   // Küp Z noktalari

const int face[12][3]={{0,1,2},{2,3,0},{1,5,6},{6,2,1},    // Küpün yüzleri
                       {5,4,7},{7,6,5},{4,0,3},{3,7,4},
                       {3,2,6},{6,7,3},{0,4,5},{5,1,0}};


 uint16_t PrescalerValue = 0;
uint8_t Buffer[6];
uint8_t BufferX[6];
uint8_t BufferY[6];
uint8_t BufferZ[6];
//__IO uint32_t TimingDelay = 0;
__IO int8_t XOffset;
__IO int8_t YOffset;

__IO uint8_t SingleClickDetect = 0x00;
extern uint8_t ClickReg;


static __IO uint32_t TimingDelay;

 
GPIO_InitTypeDef GPIO_InitStructure;


void Obje3D(void);


int main(void)
{

	uint8_t ctrl = 0;

   float  tx,ty,tz,x,y,z;
   int i;
   float sx,sy,sz,cx,cy,cz;
   uint16_t ax,ay,az;
   uint16_t dx,zoom;
   uint16_t dy;
   uint16_t nx[8];
   uint16_t ny[8];
   uint16_t oldx[8];
   uint16_t oldy[8];
	
	LIS302DL_InitTypeDef LIS302DL_InitStruct;
	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;
	
	
  if (SysTick_Config(SystemCoreClock / 1000))
  { 
    /* Capture error */ 
    while (1);
  }
	
	ax = 45;
   ay = 25;
   az = 0;

   // Küp yakinlastirma degeri
   zoom = 6;

   // Küp orta noktasi
   dx = 119;
   dy = 109;

	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
	
	//LIS302DL MEMS AYARLARI
	LIS302DL_InitStruct.Power_Mode=LIS302DL_LOWPOWERMODE_ACTIVE;
	LIS302DL_InitStruct.Output_DataRate=LIS302DL_DATARATE_100;
	LIS302DL_InitStruct.Axes_Enable=LIS302DL_X_ENABLE|LIS302DL_Y_ENABLE| LIS302DL_Z_ENABLE;
	LIS302DL_InitStruct.Full_Scale=LIS302DL_FULLSCALE_2_3;
	LIS302DL_InitStruct.Self_Test=LIS302DL_SELFTEST_NORMAL;
	LIS302DL_Init(&LIS302DL_InitStruct);
	
	//HIGH PASS FILTER AYARLAMALARI
	LIS302DL_InterruptStruct.Latch_Request=LIS302DL_INTERRUPTREQUEST_LATCHED;
	LIS302DL_InterruptStruct.SingleClick_Axes=LIS302DL_CLICKINTERRUPT_Z_ENABLE;
	LIS302DL_InterruptStruct.DoubleClick_Axes=LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
	
	//Turn-on time = 3/Output data Rate = 3/100 = 30ms
	Delay(30);
	// KESME KONTROL REGISTERI= TIKLAMA 1 INTERRUPT1;
	ctrl = 0x07;
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
	//Z ekseninde tiklama Kesme Enable / çift tiklaMA
	ctrl = 0x70;
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
	// X Y EKSENINE GORE TIKLAMA (10 x 0.5 g)
	ctrl = 0xAA;
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
	//Z ekseni (10 x 0.5 g) üzerine Esik
	 ctrl = 0x0A;
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
	//Time Limit
	ctrl = 0x03;
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
	//GECIKME
	 ctrl = 0x7F;
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
	//TIKLAMA PENCERESI
	ctrl = 0x7F;
  LIS302DL_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
                                                       
	TIM_Config(); 
  LIS302DL_Read(Buffer, LIS302DL_OUT_X_ADDR, 6);
                  
  XOffset = Buffer[0];
  YOffset = Buffer[2];
	
	STM_EVAL_LEDInit(LED4);
  STM_EVAL_LEDInit(LED3);

  STM_EVAL_LEDOn(LED4);
	  
	
	touch_init();
  Delay(0x3FFFFF);
  
	LCD_Init();
  Delay(0x3FFFFF);
  LCD_Clear(BLACK);
  LCD_SetTextColor(GREEN);
	LCD_BackLight(100);
	LCD_CharSize(16);
	
	LCD_StringLine(101,260,"KAAN KANDEMIR");
	LCD_StringLine(85,275,"MEMS KUP DONDURME");
	LCD_StringLine(75,290,"LIS302DL,13/05/2013");
 // tft_yaz();
	Delay(500);
	
 
 // LCD_SetDisplayWindow(0, 0, 239, 319);
	


	
  while(1)
  { Delay(100);	 // 100 ms
		
        LCD_SetTextColor(LCD_COLOR_CYAN);
  	LIS302DL_Read(BufferX, LIS302DL_OUT_X_ADDR, 6);
    sprintf(deger1,"X: %03d",BufferX[0]);
    LCD_StringLine(15,260, (u8*)deger1);
		

        LCD_SetTextColor(LCD_COLOR_GREEN);
        LIS302DL_Read(BufferY, LIS302DL_OUT_Y_ADDR, 6);
    sprintf(deger1,"Y: %03d",BufferY[0]);
    LCD_StringLine(15,280, (u8*)deger1);
		

        LCD_SetTextColor(LCD_COLOR_YELLOW);
        LIS302DL_Read(BufferZ, LIS302DL_OUT_Z_ADDR, 6);
    sprintf(deger1,"Z: %03d",BufferZ[0]);
    LCD_StringLine(15,300, (u8*)deger1);
    

   y = BufferY[0];
   x = BufferX[0];
 sx = si[ax]; sy = si[ay]; sz = si[az];
    cx = co[ax]; cy = co[ay]; cz = co[az];


    // Noktalarinin yeni koordinatlarinin hesaplanmasi
    for (i=0; i<8; i++)
        {
           tx = px[i]; ty = py[i]; tz = pz[i];

           // Eski koordinat yedekleme
           oldx[i] = nx[i]; oldy[i] = ny[i];

           // X ekseni üzerinde dönme
           y = ty * cx - tz * sx;
           z = ty * sx + tz * cx;
           ty =y; tz = z;
           // Z ekseni üzerinde dönme
           x = tx * cz - ty * sz;
           y = tx * sz + ty * cz;
           tx = x; ty = y;
           // Y ekseni üzerinde dönme
           x = tx * cy - tz * sy;
           z = tx * sy + tz * cy;
           // Ekran koordinatlari kaydet
           nx[i] = x * zoom + dx;
           ny[i] = y * zoom + dy;
        }
        //Delay(50); //Animasyon hizi

    // Eski küpün silinip yeni küpün çizilmesi
    for (i=0; i<12; i++)
        {
                    LCD_SetTextColor(LCD_COLOR_BLACK);
          LCD_DrawUniLine(oldx[face[i][0]],oldy[face[i][0]],oldx[face[i][1]],oldy[face[i][1]]);
          LCD_DrawUniLine(oldx[face[i][1]],oldy[face[i][1]],oldx[face[i][2]],oldy[face[i][2]]);
                    LCD_SetTextColor(LCD_COLOR_WHITE);
          LCD_DrawUniLine(nx[face[i][0]],ny[face[i][0]],nx[face[i][1]],ny[face[i][1]]);
          LCD_DrawUniLine(nx[face[i][1]],ny[face[i][1]],nx[face[i][2]],ny[face[i][2]]);
        }
    //açi artirma
        ax = BufferX[0];
        ay = BufferY[0];
        az = BufferZ[0];

    STM_EVAL_LEDToggle(LED3);
    //Delay(10);	 // 100 ms
    

 }
}
void TIM4_Config(void)
{
	 TIM_OCInitTypeDef  TIM_OCInitStructure;
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	
	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
	
	 GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4); 
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
	 /* -----------------------------------------------------------------------
    TIM4 Configuration: Output Compare Timing Mode:
    
    In this example TIM4 input clock (TIM4CLK) is set to 2 * APB1 clock (PCLK1), 
    since APB1 prescaler is different from 1 (APB1 Prescaler = 4, see system_stm32f4xx.c file).
      TIM4CLK = 2 * PCLK1  
      PCLK1 = HCLK / 4 
      => TIM4CLK = 2*(HCLK / 4) = HCLK/2 = SystemCoreClock/2
         
    To get TIM4 counter clock at 2 KHz, the prescaler is computed as follows:
       Prescaler = (TIM4CLK / TIM1 counter clock) - 1
       Prescaler = (168 MHz/(2 * 2 KHz)) - 1 = 41999
                                        
    To get TIM4 output clock at 1 Hz, the period (ARR)) is computed as follows:
       ARR = (TIM4 counter clock / TIM4 output clock) - 1
           = 1999
                    
    TIM4 Channel1 duty cycle = (TIM4_CCR1/ TIM4_ARR)* 100 = 50%
    TIM4 Channel2 duty cycle = (TIM4_CCR2/ TIM4_ARR)* 100 = 50%
    TIM4 Channel3 duty cycle = (TIM4_CCR3/ TIM4_ARR)* 100 = 50%
    TIM4 Channel4 duty cycle = (TIM4_CCR4/ TIM4_ARR)* 100 = 50%
    
    ==> TIM4_CCRx = TIM4_ARR/2 = 1000  (where x = 1, 2, 3 and 4).
  
    Note: 
     SystemCoreClock variable holds HCLK frequency and is defined in system_stm32f4xx.c file.
     Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
     function to update SystemCoreClock variable value. Otherwise, any configuration
     based on this variable will be incorrect.    
  ----------------------------------------------------------------------- */ 
	
	PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
	 
	  TIM_TimeBaseStructure.TIM_Period = TIM_ARR; // arr dolana kadar gidicek
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue; 
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;// up modda sayicak
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
	
	TIM_ARRPreloadConfig(TIM4, ENABLE);//manuel preload mod secimi
	
	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse=TIM_CCR;
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_High;
	//COMPARE PWM1 MOD AYARLARI KANAL2 DE
	
	TIM_OC2Init(TIM4,&TIM_OCInitStructure);
	TIM_CCxCmd(TIM4,TIM_Channel_2,DISABLE);
	
	TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
	
	//PWM1 KANAL3 AYARLARI
	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
  TIM_CCxCmd(TIM4, TIM_Channel_3, DISABLE);
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
	
	//KANAL4 PWM1 AYARLARI
	TIM_OC4Init(TIM4,&TIM_OCInitStructure);
	TIM_CCxCmd(TIM3,TIM_Channel_4,DISABLE);
	
	TIM_OC3PreloadConfig(TIM4,TIM_OCPreload_Enable);
	//TIMER 4 SAYICI AKTIF ET
	TIM_Cmd(TIM4, ENABLE);
}
void tft_yaz(void)
{
	
	LCD_SetTextColor(GREEN);

	  LCD_SetBackColor(LCD_COLOR_BLUE);
	  LCD_BackLight(100);
	  LCD_StringLine(100,30, "Kaan");
	  LCD_StringLine(85,45, "Kandemir");
	  LCD_StringLine(30,80,"NAMIK KEMAL UNIVERSITESI");
	  LCD_StringLine(15,100,"CORLU MUHENDISLIK FAKULTESI");
	  LCD_StringLine(8,125,"ELEKTRONIK VE HABERLESME MUH.");
    LCD_StringLine(45,150,"KEIL UVISION 4.70");
	LCD_StringLine(55,170,"SSD1289+XPT2046");
}

uint32_t LIS302DL_TIMEOUT_UserCallback(void)
{
  /* MEMS Accelerometer Timeout error occured */
  while (1)
  {   
  }
}






uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
    return 0; // ses çipini kullaniyorsaniz tek sample veriyi burada return ile döndürün.
}
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
    return; // ses çipini kullaniyorsaniz  burada çipe veri aktarimi DMA sona ermis
}

